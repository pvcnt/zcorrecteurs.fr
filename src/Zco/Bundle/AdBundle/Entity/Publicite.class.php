<?php

/**
 * zCorrecteurs.fr est le logiciel qui fait fonctionner www.zcorrecteurs.fr
 *
 * Copyright (C) 2012 Corrigraphie
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Publicite
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author vincent1870 <vincent@zcorrecteurs.fr>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Publicite extends BasePublicite
{
	/**
	 * Définit la date de la publicité lors de l'ajout.
	 * @see vendor/doctrine/Doctrine/Doctrine_Record#preInsert($event)
	 */
	public function preInsert($event)
	{
		$this['date'] = new Doctrine_Expression('NOW()');
	}

	/**
	 * Met en cache la publicité lors d'une modification.
	 * @see vendor/doctrine/Doctrine/Doctrine_Record#postSave($event)
	 */
	public function postSave($event)
	{
		//$this->mettreEnCache();
	}

	/**
	 * Supprime le cache de la publicité lors d'une suppression.
	 * @see vendor/doctrine/Doctrine/Doctrine_Record#preDelete($event)
	 */
	public function preDelete($event)
	{
		Container::getService('zco_core.cache')->delete('pub-details-'.$this['id']);
	}

	/**
	 * Retourne le CTR (taux de clics sur la pub, en pourcentage).
	 * @return float
	 */
	public function getTauxClics()
	{
		return $this['nb_affichages'] > 0 ? 100 * $this['nb_clics'] / $this['nb_affichages'] : 0;
	}

	/**
	 * Retourne l'état de la publicité, en fonction du statut de
	 * l'approbation par l'équipe et de son statut actif.
	 *
	 * @return string
	 */
	public function getEtatFormat()
	{
		if ($this['approuve'] == 'attente')
		{
			return '<span class="orange">En cours de validation</span>';
		}
		elseif ($this['approuve'] == 'refuse')
		{
			return '<span class="rouge">Refusée à la publication</span>';
		}
		else
		{
			return $this['actif'] ? '<span class="vertf">Active</span>' : '<span class="orange">En pause</span>';
		}
	}

	/**
	 * Définit si la publicité est éligible pour un affichage, de façon
	 * générale (ne prend pas en compte le ciblage).
	 *
	 * @return boolean
	 */
	public function estAffichable()
	{
		return $this['approuve'] == 'approuve' && $this['actif'];
	}

	/**
	 * Transforme une publicité en un tableau bien exploité
	 * et la met en cache.
	 *
	 * @return array			Les données mises en cache.
	 */
	public function mettreEnCache()
	{
		$this->refreshRelated('Pays');
		$array = $this->toArray();

		//Suppression des données de la campagne.
		unset($array['Campagne']);

		//Mise en forme du tableau des pays.
		$pays = $array['Pays'];
		$array['Pays'] = array();
		foreach ($pays as $p)
		{
			$array['Pays'][] = $p['id'];
		}

		Container::getService('zco_core.cache')->set('pub_details-'.$this['id'], $array, 0);

		return $array;
	}

	/**
	 * Remet à zéro les impressions pour une date donnée.
	 * @param string $date			Date au format YYYY-MM-DD.
	 */
	public function razAffichages($date)
	{
		$nbv = Doctrine_Query::create()
			->select('nb_affichages')
			->from('PubliciteStat')
			->where('publicite_id = ?', $this['id'])
			->andWhere('date = ?', $date)
			->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);

		if ($nbv > 0)
		{
			Doctrine_Query::create()
				->update('PubliciteStat')
				->set('nb_affichages', 0)
				->where('publicite_id = ?', $this['id'])
				->andWhere('date = ?', $date)
				->execute();

			$this['nb_affichages'] = $this['nb_affichages'] - $nbv;
			$this->save();

			$campagne = $this->Campagne;
			$campagne['nb_affichages'] = $campagne['nb_affichages'] - $nbv;
			$campagne->save();
		}
	}

	/**
	 * Remet à zéro les clics pour une date donnée.
	 * @param string $date			Date au format YYYY-MM-DD.
	 */
	public function razClics($date)
	{
		$nbv = Doctrine_Query::create()
			->select('nb_clics')
			->from('PubliciteStat')
			->where('publicite_id = ?', $this['id'])
			->andWhere('date = ?', $date)
			->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);

		if ($nbv > 0)
		{
			Doctrine_Query::create()
				->update('PubliciteStat')
				->set('nb_clics', 0)
				->where('publicite_id = ?', $this['id'])
				->andWhere('date = ?', $date)
				->execute();

			$this['nb_clics'] = $this['nb_clics'] - $nbv;
			$this->save();

			$campagne = $this->Campagne;
			$campagne['nb_clics'] = $campagne['nb_clics'] - $nbv;
			$campagne->save();

			Doctrine_Query::create()
				->delete('PubliciteClic')
				->where('publicite_id = ?', $this['id'])
				->andWhere('DATE(date) = ?', $date)
				->execute();
		}
	}
}