<?php

/**
 * zCorrecteurs.fr est le logiciel qui fait fonctionner www.zcorrecteurs.fr
 *
 * Copyright (C) 2012 Corrigraphie
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Quiz
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @author vincent1870 <vincent@zcorrecteurs.fr>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Quiz extends BaseQuiz
{
	/**
	 * (non-PHPdoc)
	 * @see vendor/doctrine/Doctrine/Doctrine_Record#preInsert($event)
	 */
	public function preInsert($event)
	{
		$this['utilisateur_id'] = $_SESSION['id'];
		$this['date'] = date('Y-m-d H:i:s');
	}
	
	public function __toString()
	{
		return $this['nom'];
	}

	/**
	 * Retourne le code HTML pour afficher la difficulté sous
	 * forme d'étoiles.
	 *
	 * @return string
	 */
	public function AfficherEtoiles()
	{
		$conv = array('Facile' => 1, 'Moyen' => 2, 'Difficile' => 3);

		$ret = '';
		for ($i = 1 ; $i <= $conv[$this['difficulte']] ; $i++)
		{
			$ret .= '<img src="/bundles/zcoquiz/img/etoile.png" alt="'.$this['difficulte'].'" title="'.$this['difficulte'].'" />';
		}
		return $ret;
	}

	/**
	 * Calcule le score à un quiz.
	 * @param Doctrine_Collection $questions		Les questions.
	 * @param boolean $score						Sauvegarder le score ?
	 * @return integer								La note obtenue.
	 */
	public function Soumettre($questions = null, $score = true)
	{
		if (is_null($questions))
		{
			$questions = $this->Questions(false);
		}

		//Calcul du score.
		$score = 0;
		foreach ($questions as $question)
		{
			if (isset($_POST['rep'.$question['id']]))
			{
				if ($_POST['rep'.$question['id']] != 0 && $_POST['rep'.$question['id']] == $question['reponse_juste'])
				{
					$score ++;
				}
			}
		}
		$note = (int)round($score / count($questions) * 20);

		if ($score == true)
		{
			$score = new QuizScore;
			$score['utilisateur_id'] = $_SESSION['id'] > 0 ? $_SESSION['id'] : null;
			$score['quiz_id']        = $this['id'];
			$score['note']           = $note;
			$score->save();
		}

		return $note;
	}

	/**
	 * Récupère les questions liées au quiz.
	 *
	 * @param null|boolean|array $aleatoire		Si null, comportement par défaut
	 * du quiz. Sinon, réécrit par-dessus ce comportement. Si c'est un array, les
	 * questions sont prises uniquements dans la liste des id donnés.
	 * @return Doctrine_Collection
	 */
	public function Questions($aleatoire = null)
	{
		$query = Doctrine_Query::create()
			->select('id, date, question, explication, reponse1, reponse2, '.
				'reponse3, reponse4, reponse_juste')
			->from('QuizQuestion')
			->where('quiz_id = ?', $this['id']);

		if (($aleatoire === true) || (is_null($aleatoire) && $this['aleatoire'] == true))
		{
			$query->orderBy('RAND()');
			$query->limit(QUIZ_ALEATOIRE_NB_QUESTIONS);
		}
		elseif (is_array($aleatoire))
		{
			$query->andWhereIn('id', $aleatoire);
		}

		return $query->execute();
	}
}
